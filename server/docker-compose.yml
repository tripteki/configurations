version: "3"

secrets:

  memory:

    file: .secret/memory

  database_postgresql:

    file: .secret/database_postgresql

volumes:

  codebase_frontend:

  codebase_backend:

services:

  #codebase_frontend_kit:

    #build:

      #context: "./"
      #dockerfile: "Dockerfile-frontend.kit"
      #args:

        #USER: ${USERID}
        #GROUP: ${GROUPID}
        #TZ: ${TZ}

        #NODE_NAME: ${COMPOSE_PROJECT_NAME}
        #NODE_ENV: ${COMPOSE_PROJECT_ENV}

    #image: "codebase_frontend_kit:latest"
    #entrypoint: []
    #command: ["tail", "-f", "/dev/null"]

  #codebase_backend_kit:

    #build:

      #context: "./"
      #dockerfile: "Dockerfile-backend.kit"
      #args:

        #USER: ${USERID}
        #GROUP: ${GROUPID}
        #APP_TIMEZONE: ${TZ}

        #APP_NAME: ${COMPOSE_PROJECT_NAME}
        #APP_ENV: ${COMPOSE_PROJECT_ENV}

    #image: "codebase_backend_kit:latest"
    #entrypoint: []
    #command: ["tail", "-f", "/dev/null"]

  codebase_frontend:

    build:

      context: "./"
      dockerfile: "Dockerfile-frontend"

    image: "${COMPOSE_PROJECT_NAME}_frontend:latest"
    container_name: "${COMPOSE_PROJECT_NAME}_frontend"

    volumes:

      - codebase_frontend:/var/www/${COMPOSE_PROJECT_NAME}/

    restart: always

    extra_hosts:

      - "host.docker.internal:host-gateway"

    expose:

      - 9000

    links:

      #- codebase_frontend_kit
      - codebase_backend

  codebase_backend:

    build:

      context: "./"
      dockerfile: "Dockerfile-backend"

    image: "${COMPOSE_PROJECT_NAME}_backend:latest"
    container_name: "${COMPOSE_PROJECT_NAME}_backend"

    volumes:

      - codebase_backend:/var/www/${COMPOSE_PROJECT_NAME}/

    restart: always

    extra_hosts:

      - "host.docker.internal:host-gateway"

    expose:

      - 9000

    links:

      #- codebase_backend_kit
      - memory
      - database_postgresql
      - mail

  server_codebase_frontend:

    image: nginx:1.25.4-alpine3.18

    volumes:

      # - /etc/letsencrypt/archive/frontend.test/:/etc/letsencrypt/live/frontend.test/ #
      - ./storage/server/frontend.conf:/etc/nginx/templates/default.conf.template
      - codebase_frontend:/var/www/${COMPOSE_PROJECT_NAME}/

    ports:

      - ${SERVER_FRONTEND_PORT}:80
      - ${SERVER_FRONTEND_SECURE_PORT}:443

    restart: always

    environment:

      TZ: ${TZ}

      NAME: ${COMPOSE_PROJECT_NAME}

    links:

      - codebase_frontend

  server_codebase_backend:

    image: nginx:1.25.4-alpine3.18

    volumes:

      # - /etc/letsencrypt/archive/backend.test/:/etc/letsencrypt/live/backend.test/ #
      - ./storage/server/backend.conf:/etc/nginx/templates/default.conf.template
      - codebase_backend:/var/www/${COMPOSE_PROJECT_NAME}/

    ports:

      - ${SERVER_BACKEND_PORT}:80
      - ${SERVER_BACKEND_SECURE_PORT}:443

    restart: always

    environment:

      TZ: ${TZ}

      NAME: ${COMPOSE_PROJECT_NAME}

    links:

      - codebase_backend

  memory:

    image: redis:7.2.4

    volumes:

      - ./storage/redis:/data

    extra_hosts:

      - "host.docker.internal:host-gateway"

    ports:

      - ${MEMORY_PORT}:6379

    restart: always

    environment:

      TZ: ${TZ}

      REDIS_PASSWORD_FILE: /run/secrets/memory

    secrets:

      - memory

    command: ["bash", "-c", 'docker-entrypoint.sh --requirepass "$$(cat $$REDIS_PASSWORD_FILE)"']

  database_postgresql:

    image: postgres:14.11

    volumes:

      - ./storage/postgresql:/var/lib/postgresql
      - ./migration/dump.sql:/docker-entrypoint-initdb.d/dump.sql

    extra_hosts:

      - "host.docker.internal:host-gateway"

    ports:

      - ${DATABASE_POSTGRESQL_PORT}:5432

    restart: always

    environment:

      TZ: ${TZ}

      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD_FILE: /run/secrets/database_postgresql

    secrets:

      - database_postgresql

  mail:

    image: mailhog/mailhog:v1.0.1

    ports:

      - 1025:1025
      - 8025:8025

    restart: always

    environment:

      TZ: ${TZ}
